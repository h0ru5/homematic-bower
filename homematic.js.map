{"version":3,"sources":["homematic.coffee"],"names":[],"mappings":"CAAA,SAAA,GAAA,GAAA,gBAAA,SAAA,OAAA,QAAA,QAAA,IAAA,kBAAA,SAAA,OAAA,IAAA,OAAA,OAAA,CAAA,GAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,mBAAA,QAAA,EAAA,OAAA,mBAAA,QAAA,EAAA,MAAA,EAAA,UAAA,MAAA,WAAA,GAAA,GAAA,EAAA,CAAA,OAAA,SAAA,GAAA,EAAA,EAAA,GAAA,QAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GAAA,CAAA,IAAA,EAAA,GAAA,CAAA,GAAA,GAAA,kBAAA,UAAA,OAAA,KAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,IAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,IAAA,OAAA,uBAAA,EAAA,KAAA,GAAA,GAAA,EAAA,IAAA,WAAA,GAAA,GAAA,GAAA,KAAA,EAAA,QAAA,SAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,OAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,MAAA,GAAA,GAAA,QAAA,IAAA,GAAA,GAAA,kBAAA,UAAA,QAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,GAAA,OAAA,KAAA,GAAA,SAAA,EAAA,GAQQ,2CAQP,GAAO,GAhBR,GAAA,GAAA,GAAA,GAAA,gBAAA,OAkBO,GAAQ,aACd,GACA,EAAG,WAAH,GAAY,EAAA,YAAZ,EAAA,OACK,GArBN,GAAA,GAeW,EAAA,oCAfX,MAuBO,GAAQ,IACd,EACM,UAAU,IAAC,WAChB,MAAI,GAAU,yBACV,EAAQ,IACX,SAAI,GAcF,0BA1CL,KA8CO,aAAQ,EACd,KAAA,UAAA,EAAA,KAAM,QAAS,EACf,KAAA,YAAA,GAAA,GAAA,IAAY,KAAA,gBAAZ,GAAA,GAAA,MAAA,IAAA,GAAA,gCACyB,WAHG,EAAA,gCATjB,EAAA,mBADyB,EAAA,cAAA,EADnC,EAAA,aAAA,SASA,EAVD,EAAA,aAAA,UADwC,EAAA,mBAAA,GAAA,EAAA,mBAmBrC,gBAAW,WAAe,MAAA,MAAA,QAAD,2CAEd,SAAR,GACQ,QAAX,QACF,EAAA,SACA,EAAA,EAF4B,OAAA,KAAA,IAvD9B,KAAA,YAAA,KAAA,EAAA,EAAA,sBA6DwB,EACtB,UAAA,OADsB,SAAA,EAAA,EAAA,GAItB,SADA,GAEO,MAAA,EAAA,QACN,EAAM,SADP,EAAA,EAAA,OAAA,KAAA,GALD,IADyB,GAAA,KAAA,eA5D1B,GAAA,KAAA,EAAA,EAAA,2BAAA,KAuEO,cACN,EACA,UADA,sCAME,GAAA,GAAoB,KAAM,kBACb,SAAQ,GAAA,OACnB,EAAiB,UACZ,EACH,QAAA,EAAA,EAAA,OAAA,GAAA,KACA,EAAe,GADf,KAAA,SAAA,KAAA,sBAAA,EAAA,UAOA,mBAAQ,0BACP,cARD,SAAA,GAAA,CAAA,GASA,GAAA,EAAW,QACV,EAAA,EAAA,YAAA,QADU,EATX,EAAA,EAAA,EAAA,MADD,IADyB,EAAA,CAFO,GACd,KAAA,aADc,MAAA,EAAA,OAPP,KAAA,GAAA,CAO5B,GAAA,OAAA,KAAA,QAAA,EAAA","file":"homematic.js","sourcesContent":["rq = require 'request-promise'\r\nPromise = require 'bluebird'\r\nxml2js = require 'xml2js'\r\n\r\nPromise.promisifyAll require('xml2js');\r\n\r\nlists=['devicelist','functionslist','sysvarlist','statelist','programlist','favoritelist','roomlist'];\r\n\r\nurlOf = (host,script,vars,method='GET') ->\r\n\t\t\tres =\r\n\t\t\t\t'qs' : vars\r\n\t\t\t\t'url' : \"http://#{host}/config/xmlapi/#{script}.cgi\"\r\n\t\t\t\t'withCredentials' : false\r\n\t\t\t\t'scheme' : 'http' #a bug in browserify?\n\r\nparseXml = (xml) ->\r\n\txml2js.parseStringAsync xml\r\n\r\nmodule.exports.getStates = (addr,raw) ->\r\n\tres = rq(urlOf(addr,'statelist')).then parseXml\r\n\tif raw then return res\r\n\telse res.then parseStates\r\n\r\nmodule.exports.parseStates = parseStates = (result) ->\r\n\tres = []\r\n\tresult.stateList.device.forEach (dev,devidx) ->\r\n\t\tres[devidx] = { \"id\" : dev.$.ise_id, \"name\" : dev.$.name, channels : [] }\r\n\t\tdev.channel.forEach (channel,chidx) ->\r\n\t\t\tres[devidx].channels[chidx] = { \"id\" : channel.$.ise_id, \"name\" : channel.$.name , datapoints : []}\r\n\t\t\tchannel.datapoint.forEach (dp,dpidx) ->\r\n\t\t\t\tres[devidx].channels[chidx].datapoints[dpidx] = dp.$;\r\n\treturn res\r\n\r\nmodule.exports.parseProgs = parseProgs = (addr) ->\r\n\t(result) ->\r\n\t\tres = []\r\n\t\tresult.programList.program.forEach (prog) ->\r\n\t\t\tres.push {\r\n\t\t\t\t\"addr\" : addr\r\n\t\t\t\t\"id\" : prog.$.id\r\n\t\t\t\t\"name\" : prog.$.name\r\n\t\t\t\t\"run\" : ->\r\n\t\t\t\t\treturn module.exports.runProgram @addr,@id\r\n\t\t\t}\r\n\t\treturn res\r\n\r\nmodule.exports.getPrograms = (addr,raw) ->\r\n\tres = rq(urlOf(addr,'programlist')).then parseXml\r\n\tif raw then return res\r\n\telse res.then parseProgs(addr)\r\n\r\nmodule.exports.runProgram = (addr,id) ->\r\n\trq urlOf(addr,'runprogram', {'program_id' : id })\r\n\r\nmodule.exports.setState = (addr, ise, value) ->\r\n\trq urlOf(addr,'statechange', {\r\n\t\t'ise_id' : ise\r\n\t\t'new_value': value\r\n\t\t\t\t\t\t\t\t })\r\n\r\nmodule.exports.getState = (addr,id) ->\n\trq urlOf(addr,'state', {\n\t\t'datapoint_id' : id\n\t\t})\n\t.then parseXml\n\t.then (res) ->\n\t\tif not res.state.datapoint? || res.state.datapoint.length == 0\n\t\t\tthrow 'empty resp'\n\t\tres.state.datapoint[0].$.value\n\n\nmodule.exports.getDataPoints = (addr) ->\r\n\tres = []\r\n\tidx=0\r\n\r\n\trq(urlOf(addr,'statelist'))\r\n\t\t.then parseXml\r\n\t\t.then (stateTree) ->\r\n\t\t\tstateTree.stateList.device.forEach (dev) ->\r\n\t\t\t\tdev.channel.forEach (channel) ->\r\n\t\t\t\t\tchannel.datapoint.forEach (dp) ->\r\n\t\t\t\t\t\tres.push\r\n\t\t\t\t\t\t\t'ccu' : addr\r\n\t\t\t\t\t\t\t'device' : dev.$.name\r\n\t\t\t\t\t\t\t'channel' : channel.$.name\r\n\t\t\t\t\t\t\t'id' : dp.$.ise_id\r\n\t\t\t\t\t\t\t'type' : dp.$.type\r\n\t\t\t\t\t\t\t'timestamp' : dp.$.timestamp\r\n\t\t\t\t\t\t\t'value' : dp.$.value #todo: type according to valuetype\r\n\t\t\t\t\t\t\t'set' : (newValue) ->\r\n\t\t\t\t\t\t\t\tmodule.exports.setState @ccu,@id,newValue\r\n\t\t\t\t\t\t\t'update' : () ->\n\t\t\t\t\t\t\t\tvalue = module.exports.getState @ccu,@id\n\t\t\treturn res\r\n"],"sourceRoot":"/source/"}