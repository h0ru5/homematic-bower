{"version":3,"sources":["homematic.coffee"],"names":[],"mappings":"CAAA,SAAA,GAAA,GAAA,gBAAA,SAAA,OAAA,QAAA,QAAA,IAAA,kBAAA,SAAA,OAAA,IAAA,OAAA,OAAA,CAAA,GAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,mBAAA,QAAA,EAAA,OAAA,mBAAA,QAAA,EAAA,MAAA,EAAA,UAAA,MAAA,WAAA,GAAA,GAAA,EAAA,CAAA,OAAA,SAAA,GAAA,EAAA,EAAA,GAAA,QAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GAAA,CAAA,IAAA,EAAA,GAAA,CAAA,GAAA,GAAA,kBAAA,UAAA,OAAA,KAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,IAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,IAAA,OAAA,uBAAA,EAAA,KAAA,GAAA,GAAA,EAAA,IAAA,WAAA,GAAA,GAAA,GAAA,KAAA,EAAA,QAAA,SAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,OAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,MAAA,GAAA,GAAA,QAAA,IAAA,GAAA,GAAA,kBAAA,UAAA,QAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,GAAA,OAAA,KAAA,GAAA,SAAA,EAAA,eAAA,GAAA,QAcW,SAAA,GAAA,QAdX,GAAA,kBAiBO,EAAQ,EAAA,SACd,OAAA,GAAA,aAAS,GACG,EAAA,WAAZ,GAAA,EAAA,qBAF0B,SAFnB,EAAA,iBAfR,GAsBO,IAAO,SAAe,GAC5B,MAAA,GAAA,IAEC,EAAI,UAAU,IAAA,WAAA,MAAE,GAAF,aAEb,GAAI,SAAQ,EAAS,IAAS,SAAE,eA3BnC,SA6CO,KACN,KAAA,aAAA,EAAA,KAAM,UAAG,EACT,KAAA,QAAA,EAAY,KAAA,YAAZ,GAAA,GAAA,IAAA,KAAA,gBAAA,GAAA,GAAA,aACS,IAHmB,MAAA,sBAAA,WA7C7B,EAAA,gCAmCqC,EAAA,iBAAA,EADnC,EAAA,cASA,EAVD,EAAA,aAAA,SADwC,EAAA,EAAA,aAAA,UAhCzC,EAAA,mBAAA,GAAA,EAAA,MAmD6B,GAAC,UAAA,gBAAD,WAA5B,MAD2B,MAAA,QAAA,GAlD5B,EAqDM,UAAS,YAAW,SAAA,EAAA,EAAA,GAChB,YAAoB,MAC5B,EAD4B,QAE5B,EAAA,SAHwB,EAAA,EAAA,OAAA,KAAA,iCArD1B,KA2DO,cACN,EACA,UADA,OAAA,SAAA,EAAA,EAAA,GAGS,YAGa,MAApB,EAAU,uBAED,OAAC,KAAU,GAEhB,IAAA,GAAA,KAAA,eAAA,GACA,KAAW,EAAM,EADjB,GAAA,KAAA,QAEA,EAAsB,SAFtB,KAAA,cAAA,EAAA,UAMA,uBANA,qBAQC,KAAO,kBARR,SAAA,GAAA,IADD,GADyB,EAAA,QADP,EAAA,EAAA,QADc,EAAA,EAAA,OAAnC,GAAA,KAAA,EAAA,GAHF,KAJ8B,SA3D/B,KAAA","file":"homematic.js","sourcesContent":["rq = require 'request-promise'\nPromise = require 'bluebird'\nxml2js = require 'xml2js'\n\nPromise.promisifyAll require('xml2js');\n\nlists=['devicelist','functionslist','sysvarlist','statelist','programlist','favoritelist','roomlist'];\n\nurlOf = (host,script,vars,method='GET') ->\n\t\t\tres =\n\t\t\t\t'qs' : vars\n\t\t\t\t'url' : \"http://#{host}/config/xmlapi/#{script}.cgi\"\n\t\t\t\t'withCredentials' : false\n\nparseXml = (xml) ->\n\txml2js.parseStringAsync xml\n\nmodule.exports.getStates = (addr,raw) ->\n\tres = rq(urlOf(addr,'statelist')).then parseXml\n\tif raw then return res\n\telse res.then parseStates\n\nmodule.exports.parseStates = parseStates = (result) ->\n\tres = []\n\tresult.stateList.device.forEach (dev,devidx) ->\n\t\tres[devidx] = { \"id\" : dev.$.ise_id, \"name\" : dev.$.name, channels : [] }\n\t\tdev.channel.forEach (channel,chidx) ->\n\t\t\tres[devidx].channels[chidx] = { \"id\" : channel.$.ise_id, \"name\" : channel.$.name , datapoints : []}\n\t\t\tchannel.datapoint.forEach (dp,dpidx) ->\n\t\t\t\tres[devidx].channels[chidx].datapoints[dpidx] = dp.$;\n\treturn res\n\nmodule.exports.parseProgs = parseProgs = (addr) ->\n\t(result) ->\n\t\tres = []\n\t\tresult.programList.program.forEach (prog) ->\n\t\t\tres.push {\n\t\t\t\t\"addr\" : addr\n\t\t\t\t\"id\" : prog.$.id\n\t\t\t\t\"name\" : prog.$.name\n\t\t\t\t\"run\" : ->\n\t\t\t\t\treturn module.exports.runProgram @addr,@id\n\t\t\t}\n\t\treturn res\n\nmodule.exports.getPrograms = (addr,raw) ->\n\tres = rq(urlOf(addr,'programlist')).then parseXml\n\tif raw then return res\n\telse res.then parseProgs(addr)\n\nmodule.exports.runProgram = (addr,id) ->\n\trq urlOf(addr,'runprogram', {'program_id' : id })\n\nmodule.exports.setState = (addr, ise, value) ->\n\trq urlOf(addr,'statechange', {\n\t\t'ise_id' : ise\n\t\t'new_value': value\n\t\t\t\t\t\t\t\t })\n\nmodule.exports.getDataPoints = (addr) ->\n\tres = []\n\tidx=0\n\n\trq(urlOf(addr,'statelist'))\n\t\t.then parseXml\n\t\t.then (stateTree) ->\n\t\t\tstateTree.stateList.device.forEach (dev) ->\n\t\t\t\tdev.channel.forEach (channel) ->\n\t\t\t\t\tchannel.datapoint.forEach (dp) ->\n\t\t\t\t\t\tres.push\n\t\t\t\t\t\t\t'ccu' : addr\n\t\t\t\t\t\t\t'device' : dev.$.name\n\t\t\t\t\t\t\t'channel' : channel.$.name\n\t\t\t\t\t\t\t'id' : dp.$.ise_id\n\t\t\t\t\t\t\t'type' : dp.$.type\n\t\t\t\t\t\t\t'timestamp' : dp.$.timestamp\n\t\t\t\t\t\t\t'value' : dp.$.value #todo: type according to valuetype\n\t\t\t\t\t\t\t'set' : (newValue) ->\n\t\t\t\t\t\t\t\tmodule.exports.setState @ccu,@id,newValue\n\t\t\treturn res\n"],"sourceRoot":"/source/"}